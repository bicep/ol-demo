{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Model Context Protocol Explained","text":"<p>A simple way to understand how AI tools communicate.</p> What is MCP? <p>MCP is a protocol that allows AI models to communicate with external systems through standardized requests.</p> Example Request <pre><code>{\n  \"type\": \"mcp.request\",\n  \"action\": \"send_email\",\n  \"data\": { \"to\": \"user@example.com\" }\n}\n</code></pre>"},{"location":"#the-core-idea","title":"\ud83c\udfaf The Core Idea","text":"<p>If you forget everything else, remember this:</p> <p>MCP is like a USB port for AI tools \u2014 any tool can plug in, communicate in a standard way, and work immediately.</p> <p></p>"},{"location":"#1-the-problem-it-solves","title":"1\ufe0f\u20e3 The Problem It Solves","text":"<p>Modern AI tools often act in isolation \u2014 each with their own APIs and context limits. This leads to duplication, inconsistency, and limited cooperation between systems.</p> <pre><code>sequenceDiagram\n    participant Model\n    participant ToolA\n    participant ToolB\n    Model-&gt;&gt;ToolA: Custom API call\n    Model-&gt;&gt;ToolB: Custom API call</code></pre> <p>Without a standard, every connection is a separate cable \u2014 fragile and error-prone.</p>"},{"location":"#2-the-core-concept","title":"2\ufe0f\u20e3 The Core Concept","text":"<p>At its heart, MCP defines a shared protocol for models, tools, and clients.</p> <pre><code>flowchart TD\n    A[AI Model] --&gt;|Request| B[MCP Server]\n    B --&gt;|Invoke| C[Tool 1]\n    B --&gt;|Invoke| D[Tool 2]\n    C --&gt; B\n    D --&gt; B\n    B --&gt;|Return| A</code></pre> <p>The MCP server acts as a universal connector, handling requests and responses in a standard format.</p>"},{"location":"#3-analogy-in-action","title":"3\ufe0f\u20e3 Analogy in Action","text":"<ul> <li>AI Model = the device (e.g., laptop)  </li> <li>MCP Server = the USB hub / port  </li> <li>Tools = external devices (e.g., keyboard, mouse, hard drive)  </li> </ul> <p>Every \u201cplug in\u201d request goes through the hub, ensuring devices communicate reliably.</p>"},{"location":"#4-what-makes-mcp-different","title":"4\ufe0f\u20e3 What Makes MCP Different","text":"Feature Traditional API Model Context Protocol Communication One-to-one Many-to-many Context awareness Local only Shared and global Extensibility Manual integration Automatic tool discovery"},{"location":"#5-quick-example","title":"5\ufe0f\u20e3 Quick Example","text":"<p><pre><code>{\n  \"type\": \"request\",\n  \"method\": \"get_weather\",\n  \"params\": {\"city\": \"Singapore\"}\n}\n</code></pre> - MCP interprets the request. - Routes it to the correct tool. - Merges the result back into the model\u2019s context seamlessly.</p>"},{"location":"#tldr","title":"\u2705 TL;DR","text":"<p>MCP is like a USB port for AI tools \u2014 plug in any tool, communicate using a standard language, and it just works.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>A Concrete Example \u2192 </li> <li>Why It Matters \u2192</li> </ul>"},{"location":"a-concrete-example/","title":"\ud83d\udce9 Example: Using MCP with Gmail","text":"<p>This example shows how the Model Context Protocol (MCP) works in practice \u2014 connecting an LLM (host) with an external tool (server) such as Gmail through an MCP client.</p>"},{"location":"a-concrete-example/#scenario","title":"\ud83e\udde0 Scenario","text":"<p>You\u2019re using ChatGPT (the MCP Host) and say:</p> <p>\u201cSend an email to Alice with the report attached.\u201d</p> <p>Behind the scenes, this request travels through the MCP stack like this:</p> <ol> <li> <p>MCP Host (LLM):    Understands your intent and prepares to perform an external action.</p> </li> <li> <p>MCP Client:    Converts that intent into a structured MCP request the tool can understand.</p> </li> <li> <p>MCP Server (Gmail):    Receives the request, executes it (sending the email), and returns a response.</p> </li> </ol>"},{"location":"a-concrete-example/#data-flow","title":"\ud83d\udd04 Data Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant H as MCP Host (LLM)\n    participant C as MCP Client\n    participant G as MCP Server (Gmail)\n\n    U-&gt;&gt;H: \"Send an email to Alice with the report\"\n    H-&gt;&gt;C: Generate MCP request\n    C-&gt;&gt;G: JSON-RPC call (send_email)\n    G--&gt;&gt;C: Response: \"Email sent\"\n    C--&gt;&gt;H: Return structured result\n    H--&gt;&gt;U: \"Email sent to Alice.\"</code></pre>"},{"location":"a-concrete-example/#example-mcp-request","title":"\ud83e\uddf0 Example MCP Request","text":"<p>The MCP Client might send a request like this:</p> <p><pre><code>{\n  \"type\": \"request\",\n  \"tool\": \"gmail\",\n  \"method\": \"send_email\",\n  \"params\": {\n    \"to\": \"alice@example.com\",\n    \"subject\": \"Monthly Report\",\n    \"body\": \"Hi Alice, see attached.\"\n  }\n}\n</code></pre> And the MCP Server could respond with: <pre><code>{\n  \"type\": \"response\",\n  \"status\": \"success\",\n  \"message\": \"Email sent successfully.\"\n}\n</code></pre></p>"},{"location":"a-concrete-example/#summary","title":"\ud83d\udd0d Summary","text":"Component Role Example MCP Host Runs the model ChatGPT / OpenAI API MCP Client Translates requests OpenAI\u2019s internal connector MCP Server Executes tasks Gmail API wrapped in MCP interface Purpose Standardize communication between LLMs and tools Send email, fetch data, trigger workflows"},{"location":"mcp-presentation/","title":"How do AI Tools Talk to Each Other?","text":"<p>Explaining the Model Context Protocol (MCP) simply</p>"},{"location":"mcp-presentation/#understanding-mcp","title":"Understanding MCP","text":"<p>MCP is a protocol that allows AI models to communicate with external systems through standardized requests.</p> <p></p>"},{"location":"mcp-presentation/#the-core-idea","title":"\ud83c\udfaf The Core Idea","text":"<p>If you forget everything else, remember this:</p> <p>MCP is like a USB port for AI tools \u2014 any tool can plug in, communicate in a standard way, and work immediately.</p>"},{"location":"mcp-presentation/#1-the-problem-it-solves","title":"1\ufe0f\u20e3 The Problem It Solves","text":"<p>Modern AI tools often act in isolation \u2014 each with their own APIs and context limits. This leads to duplication, inconsistency, and limited cooperation between systems.</p> <pre><code>sequenceDiagram\n    participant Model\n    participant ToolA\n    participant ToolB\n    Model-&gt;&gt;ToolA: Custom API call\n    Model-&gt;&gt;ToolB: Custom API call</code></pre> <p>Without a standard, every connection is a separate cable \u2014 fragile and error-prone.</p>"},{"location":"mcp-presentation/#2-the-core-concept","title":"2\ufe0f\u20e3 The Core Concept","text":"<p>At its heart, MCP defines a shared protocol for models, tools, and clients.</p> <pre><code>flowchart TD\n    A[AI Model] --&gt;|Request| B[MCP Server]\n    B --&gt;|Invoke| C[Tool 1]\n    B --&gt;|Invoke| D[Tool 2]\n    C --&gt; B\n    D --&gt; B\n    B --&gt;|Return| A</code></pre> <p>The MCP server acts as a universal connector, handling requests and responses in a standard format.</p>"},{"location":"mcp-presentation/#3-analogy-in-action","title":"3\ufe0f\u20e3 Analogy in Action","text":"<ul> <li>AI Model = the device (e.g., laptop)  </li> <li>MCP Server = the USB hub / port  </li> <li>Tools = external devices (e.g., keyboard, mouse, hard drive)  </li> </ul> <p>Every \u201cplug in\u201d request goes through the hub, ensuring devices communicate reliably.</p>"},{"location":"mcp-presentation/#4-what-makes-mcp-different","title":"4\ufe0f\u20e3 What Makes MCP Different","text":"Feature Traditional API Model Context Protocol Communication One-to-one Many-to-many Context awareness Local only Shared and global Extensibility Manual integration Automatic tool discovery"},{"location":"mcp-presentation/#5-quick-example","title":"5\ufe0f\u20e3 Quick Example","text":"<p><pre><code>{\n  \"type\": \"request\",\n  \"method\": \"get_weather\",\n  \"params\": {\"city\": \"Singapore\"}\n}\n</code></pre> - MCP interprets the request. - Routes it to the correct tool. - Merges the result back into the model\u2019s context seamlessly.</p>"},{"location":"mcp-presentation/#tldr","title":"\u2705 TL;DR","text":"<p>MCP is like a USB port for AI tools \u2014 plug in any tool, communicate using a standard language, and it just works.</p>"},{"location":"mcp-presentation/#next-steps","title":"Next Steps","text":"<ul> <li>A Concrete Example \u2192 </li> </ul>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with the Promptly API in just a few steps.</p>"},{"location":"quickstart/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>Make sure you have Python 3.7+ installed, then install <code>requests</code>:</p> <pre><code>pip install requests\n</code></pre> <p>Tip: You can also use curl or any HTTP client if you prefer not to use Python.</p>"},{"location":"quickstart/#step-2-create-an-account-and-get-your-api-key","title":"Step 2: Create an Account and Get Your API Key","text":"<p>Sign up at https://promptly.ai/signup</p> <p>Keep your API key secure! Never commit it to public repositories.</p>"},{"location":"quickstart/#step-3-generate-text","title":"Step 3: Generate Text","text":"<p>Use the /v1/generate/text endpoint to gen</p> <pre><code>import requests\n\n# Endpoint and headers\nurl = \"https://api.promptly.ai/v1/generate/text\"\nheaders = {\n    \"Authorization\": \"Bearer YOUR_API_KEY\",\n    \"Content-Type\": \"application/json\"\n}\n\n# Request payload\ndata = {\n    \"model\": \"promptly-gpt-3\",\n    \"prompt\": \"Write a haiku about AI\",\n    \"max_tokens\": 50\n}\n\n# Send request\nresp = requests.post(url, headers=headers, json=data)\nprint(resp.json())\n</code></pre>"},{"location":"quickstart/#example-response","title":"Example Response","text":"<pre><code>{\n  \"id\": \"txt-001\",\n  \"text\": \"Machines learn and grow,\\nSilent algorithms hum,\\nWisdom blooms in code.\"\n}\n</code></pre> <p>Tip: Adjust max_tokens to control the length of the generated text.</p> <p>Great! You've successfully generated your first piece of text. \ud83c\udf89  </p>"},{"location":"reference/text-generation/","title":"Text Generation API","text":"<p>Generate human-like text based on prompts.</p>"},{"location":"reference/text-generation/#endpoint","title":"Endpoint","text":"<p>POST <code>/v1/text/generate</code></p>"},{"location":"reference/text-generation/#authentication","title":"Authentication","text":"<p>All requests require a Bearer token in the <code>Authorization</code> header.</p> <pre><code>Authorization: Bearer YOUR_API_KEY\nContent-Type: application/json\n</code></pre>"},{"location":"reference/text-generation/#request-body","title":"Request Body","text":"<pre><code>{\n  \"prompt\": \"Write a motivational quote about innovation.\",\n  \"max_tokens\": 100,\n  \"temperature\": 0.7\n}\n</code></pre>"},{"location":"reference/text-generation/#response","title":"Response","text":"<pre><code>{\n  \"id\": \"txt-123\",\n  \"object\": \"text_completion\",\n  \"output\": \"Innovation is the art of turning ideas into reality...\"\n}\n</code></pre>"},{"location":"reference/text-generation/#errors","title":"Errors","text":"<ul> <li><code>401 Unauthorized</code> \u2192 Invalid API key</li> <li><code>429 Too Many Requests</code> \u2192 Rate limit exceeded</li> </ul>"}]}