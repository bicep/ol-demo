{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Model Context Protocol Explained","text":"The USB-C analogy of MCP (Image: Norah Sakal) <p>Since Claude announced the inception of Model Context Protocol (MCP) in November 2024, there\u2019s been a lot of buzz in the AI and developer communities.</p> <p>Today, I\u2019ll attempt to explain MCP in simple terms, so that by the end, you\u2019ll understand not just what it does, but why it\u2019s exciting. We\u2019ll cover the basic components, how a request flows from an AI model to a tool, and why this standardization could be a game-changer for developers and users alike.</p> <p>Learn more about me on the About Me page, or dive straight into the Presentation and Example.</p>"},{"location":"about-me/","title":"About me","text":"The joys of bug-solving <p>Hi! My name is Roger. I've worn many hats in the tech industry (technical writer, product/project manager, software engineer) but I think my greatest love is writing and explaining complex technology topics simply. Thank you for giving me your time and let's have a great chat today! :)</p>"},{"location":"example/","title":"\ud83d\udce9 Example: Using MCP with Gmail","text":"<p>This example shows how the Model Context Protocol (MCP) works in practice \u2014 connecting an LLM (host) with an external tool (server) such as Gmail through an MCP client.</p>"},{"location":"example/#scenario","title":"\ud83e\udde0 Scenario","text":"<p>You\u2019re using ChatGPT (the MCP Host) and say:</p> <p>\u201cSend an email to Alice with the report attached.\u201d</p> <p>Behind the scenes, this request travels through the MCP stack like this:</p> <ol> <li> <p>MCP Host (LLM):    Understands your intent and prepares to perform an external action.</p> </li> <li> <p>MCP Client:    Converts that intent into a structured MCP request the tool can understand.</p> </li> <li> <p>MCP Server (Gmail):    Receives the request, executes it (sending the email), and returns a response.</p> </li> </ol>"},{"location":"example/#data-flow","title":"\ud83d\udd04 Data Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant H as MCP Host (LLM)\n    participant C as MCP Client\n    participant G as MCP Server (Gmail)\n\n    U-&gt;&gt;H: \"Send an email to Alice with the report\"\n    H-&gt;&gt;C: Generate MCP request\n    C-&gt;&gt;G: JSON-RPC call (send_email)\n    G--&gt;&gt;C: Response: \"Email sent\"\n    C--&gt;&gt;H: Return structured result\n    H--&gt;&gt;U: \"Email sent to Alice.\"</code></pre>"},{"location":"example/#example-mcp-request","title":"\ud83e\uddf0 Example MCP Request","text":"<p>The MCP Client might send a request like this:</p> <p><pre><code>{\n  \"type\": \"request\",\n  \"tool\": \"gmail\",\n  \"method\": \"send_email\",\n  \"params\": {\n    \"to\": \"alice@example.com\",\n    \"subject\": \"Monthly Report\",\n    \"body\": \"Hi Alice, see attached.\"\n  }\n}\n</code></pre> And the MCP Server could respond with: <pre><code>{\n  \"type\": \"response\",\n  \"status\": \"success\",\n  \"message\": \"Email sent successfully.\"\n}\n</code></pre></p>"},{"location":"example/#summary","title":"\ud83d\udd0d Summary","text":"Component Role Example MCP Host Runs the model ChatGPT / OpenAI API MCP Client Translates requests OpenAI\u2019s internal connector MCP Server Executes tasks Gmail API wrapped in MCP interface Purpose Standardize communication between LLMs and tools Send email, fetch data, trigger workflows"},{"location":"mcp-presentation/","title":"Mcp presentation","text":""},{"location":"mcp-presentation/#how-does-ai-talk-to-its-tools","title":"How Does AI Talk to Its Tools?","text":"<p>Explaining the Model Context Protocol (MCP) simply</p> <p></p>"},{"location":"mcp-presentation/#the-core-idea","title":"\ud83c\udfaf The Core Idea","text":"<p>If you forget everything else, remember this:</p> <p>Think of MCP as a universal docking station for AI models. It lets LLMs connect to any tool \u2014 Gmail, Slack, Figma, you name it \u2014 through a single, standardized protocol.</p>"},{"location":"mcp-presentation/#understanding-mcp","title":"Understanding MCP","text":"<p>MCP (Model Context Protocol) is an open-source standard for connecting AI applications to external systems. Using MCP, AI applications like Claude or ChatGPT can connect to data sources (e.g. local files, databases), tools (e.g. search engines, calculators) and workflows (e.g. specialized prompts)\u2014enabling them to access key information and perform tasks.</p>"},{"location":"mcp-presentation/#1-the-problem-mcp-is-trying-to-solve","title":"1\ufe0f\u20e3 The Problem MCP is trying to Solve","text":"<p>Modern AI tools often act in isolation \u2014 each with their own APIs and context limits. This leads to duplication, inconsistency, and limited cooperation between systems.</p>  sequenceDiagram     participant Model     participant ToolA     participant ToolB     Model-&gt;&gt;ToolA: Custom API call     Model-&gt;&gt;ToolB: Custom API call  <p>Without a standard, every connection is a separate cable \u2014 fragile and error-prone.</p>"},{"location":"mcp-presentation/#2-the-core-concept","title":"2\ufe0f\u20e3 The Core Concept","text":"<p>At its heart, MCP defines a shared protocol for how large language models communicate with its tools</p>  flowchart TD     A[AI Model] --&gt;|Request| B[MCP Server]     B --&gt;|Invoke| C[Tool 1]     B --&gt;|Invoke| D[Tool 2]     C --&gt; B     D --&gt; B     B --&gt;|Return| A  <p>The MCP server acts as a universal connector, handling requests and responses in a standard format.</p>"},{"location":"mcp-presentation/#3-mcp-architecture-client-server","title":"3\ufe0f\u20e3 MCP Architecture: Client &amp; Server","text":"<p>MCP has three main components: Host (AI model), Client, and Server (Tool).  </p> MCP Architecture (Image: Kashish Hora)  flowchart LR     A[AI Model / Host] --&gt;|Sends Intent| B[MCP Client]     B --&gt;|Standardized MCP Request| C[MCP Server]     C --&gt;|Executes Action| D[External Tool]     D --&gt; C     C --&gt;|Standardized Response| B     B --&gt;|Delivers Result| A  <ul> <li>Host / Model: Knows what it wants to do (e.g., send an email).  </li> <li>Client: Converts intent into an MCP request the server can understand.  </li> <li>Server: Executes the request on the tool and sends back a standard response.  </li> </ul>"},{"location":"mcp-presentation/#4-concrete-example-sending-an-email","title":"4\ufe0f\u20e3 Concrete Example: Sending an Email","text":"<p>Imagine your AI wants to send an email via Gmail.</p>  sequenceDiagram     participant User     participant Host     participant Client     participant Server     participant Gmail     User-&gt;&gt;Host: \"Send email to Alice with report\"     Host-&gt;&gt;Client: Generate MCP request     Client-&gt;&gt;Server: send_email request (to: Alice, body: report)     Server-&gt;&gt;Gmail: Execute send email     Gmail--&gt;&gt;Server: Email sent     Server-&gt;&gt;Client: Success response     Client-&gt;&gt;Host: Return structured result     Host-&gt;&gt;User: Email sent confirmation  <ul> <li>The AI never talks directly to Gmail \u2014 it goes through MCP Client &amp; Server.  </li> <li>Any tool (Slack, Google Docs, etc.) can be plugged in using the same pattern.  </li> </ul>"},{"location":"mcp-presentation/#5-why-this-matters-product-use-cases","title":"5\ufe0f\u20e3 Why This Matters: Product Use Cases","text":"Use Case How MCP Applies MCP Components Involved \ud83d\udce9 Automating Email AI sends, schedules, or drafts emails through Gmail Host (LLM) \u2192 Client \u2192 Gmail Server \ud83d\udcca Generating Reports AI pulls data from multiple sources (Excel, Google Sheets, databases) and formats reports Host \u2192 Client \u2192 Tool Servers (Sheets, DBs) \ud83d\udcac Managing Chatbots AI coordinates multi-platform chatbots (Slack, WhatsApp, internal tools) seamlessly Host \u2192 Client \u2192 Chat Platforms Servers <p>We\u2019ll go into detail on email automation, which demonstrates the full MCP flow in a simple example.</p>"},{"location":"reference/text-generation/","title":"Text Generation API","text":"<p>Generate human-like text based on prompts.</p>"},{"location":"reference/text-generation/#endpoint","title":"Endpoint","text":"<p>POST <code>/v1/text/generate</code></p>"},{"location":"reference/text-generation/#authentication","title":"Authentication","text":"<p>All requests require a Bearer token in the <code>Authorization</code> header.</p> <pre><code>Authorization: Bearer YOUR_API_KEY\nContent-Type: application/json\n</code></pre>"},{"location":"reference/text-generation/#request-body","title":"Request Body","text":"<pre><code>{\n  \"prompt\": \"Write a motivational quote about innovation.\",\n  \"max_tokens\": 100,\n  \"temperature\": 0.7\n}\n</code></pre>"},{"location":"reference/text-generation/#response","title":"Response","text":"<pre><code>{\n  \"id\": \"txt-123\",\n  \"object\": \"text_completion\",\n  \"output\": \"Innovation is the art of turning ideas into reality...\"\n}\n</code></pre>"},{"location":"reference/text-generation/#errors","title":"Errors","text":"<ul> <li><code>401 Unauthorized</code> \u2192 Invalid API key</li> <li><code>429 Too Many Requests</code> \u2192 Rate limit exceeded</li> </ul>"}]}