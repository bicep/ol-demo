{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Model Context Protocol Explained","text":"The USB-C analogy of MCP (Image: Norah Sakal) <p>In November 2024, Claude announced the Model Context Protocol (MCP) to much fanfare in the AI and developer communities.</p> <p>Today, I\u2019ll attempt to explain MCP in simple terms for a diverse audience. By the end, you\u2019ll understand not just what it does, but why it\u2019s exciting. We\u2019ll cover the basic components, how a request flows from an AI model to a tool, and why this standardization could be a game-changer for developers and users alike.</p> <p>Learn more about me here, or dive straight into the presentation and use case example.</p>"},{"location":"about-me/","title":"About me","text":"The joys of bug-solving <p>Hi! My name is Roger. I've worn many hats in the tech industry (technical writer, product/project manager, software engineer) but I think my greatest love is writing about and explaining complex technology topics simply. Thank you for giving me your time and let's have a great chat today! :)</p>"},{"location":"example/","title":"In-Depth Example: Using MCP with Gmail \ud83d\udce9","text":"<p>Now that we have looked at a few use cases and a high-level overview of MCP, let's dive into a detailed, technical example showing how an LLM communicates with Gmail via MCP.</p> <p>This example demonstrates how MCP works end-to-end, including how an LLM translates a user request into an actionable request for Gmail, and how the server executes it.</p>"},{"location":"example/#a-quick-note-on-json-rpc","title":"A Quick Note on JSON-RPC","text":"<p>Before diving deeper, it helps to understand the format that powers most MCP communications: JSON-RPC.</p> <p>It\u2019s a lightweight, standardized way for two systems to talk \u2014 one sends a request (usually containing a <code>method</code> and some <code>params</code>), and the other sends back a response (with either a <code>result</code> or an <code>error</code>).</p> <p>Think of it as a common language for function calls over JSON \u2014 no custom API formats, just a consistent structure every time.</p> Example Request <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"42\",\n  \"method\": \"send_email\",\n  \"params\": {\n    \"to\": \"alice@example.com\",\n    \"subject\": \"Hello\",\n    \"body\": \"How are you?\"\n  }\n}\n</code></pre>"},{"location":"example/#scenario","title":"Scenario","text":"<p>User says:</p> <p>\u201cSend an email to Alice with the report attached.\u201d</p> <p>LLM connects to Gmail tool using MCP</p> <p>Email gets sent.</p> <p>User gets back a response:</p> <p>\"Done! I have sent the email to Alice using your gmail account.\"</p>"},{"location":"example/#detailed-data-flow","title":"Detailed Data Flow","text":"<pre><code>sequenceDiagram\n  participant U as User\n  participant H as MCP Host (LLM)\n  participant C as MCP Client\n  participant S as MCP Server\n  participant G as Gmail API\n  U-&gt;&gt;H: \"Send an email to Alice with report attached\"\n  H-&gt;&gt;C: Ask available tools (get_capabilities)\n  C-&gt;&gt;S: Request list of tools\n  S--&gt;&gt;C: Returns available tools (e.g. gmail.send_email)\n  C--&gt;&gt;H: Tool metadata returned\n  H-&gt;&gt;H: Parse intent \u2192 identify action &amp; parameters\n  H-&gt;&gt;C: MCP request JSON (tool: gmail, method: send_email, params {...})\n  C-&gt;&gt;S: Send JSON-RPC request\n  S-&gt;&gt;G: Map MCP \u2192 Gmail API call (POST /messages/send)\n  G--&gt;&gt;S: Gmail HTTP Response (200 OK / error)\n  S-&gt;&gt;C: Convert Gmail response \u2192 MCP JSON-RPC response\n  C-&gt;&gt;H: Return structured result\n  H-&gt;&gt;U: \"Email sent successfully.\"</code></pre>"},{"location":"example/#end-to-end-journey-of-the-request","title":"End to end journey of the request","text":"<p>We want to show everything that happens behind the scenes:</p> 0. Tool Discovery (Handshake) <ul> <li>Before doing anything, the MCP Host (LLM) asks the MCP Client what tools are available.  </li> <li>The Client calls <code>get_capabilities</code> on the MCP Server.  </li> <li>The Server responds with a list of tools (e.g. <code>gmail.send_email</code>, <code>calendar.create_event</code>) and their input schemas.  </li> <li>The Host stores this so it knows what\u2019s possible before interpreting user intent.  </li> </ul> 1. Intent Parsing (MCP Host / LLM) <ul> <li>LLM interprets natural language query.  </li> <li>Identifies action (<code>send_email</code>) and parameters (<code>to</code>, <code>subject</code>, <code>body</code>).  </li> <li>Produces a structured intermediate representation for MCP Client.</li> </ul> 2. MCP Client Translation <ul> <li>Converts LLM intent into MCP JSON-RPC format.  </li> <li>Handles data validation (email addresses, attachment size).  </li> <li>Ensures it conforms to MCP standard (tool name, method, params).  </li> </ul> 3. MCP Server Execution <ul> <li>Receives JSON-RPC request.  </li> <li>Maps MCP method to Gmail API endpoints.  <ul> <li>e.g., <code>send_email</code> \u2192 <code>POST https://gmail.googleapis.com/gmail/v1/users/me/messages/send</code> </li> </ul> </li> <li>Handles authentication / OAuth tokens.  </li> <li>Formats body and attachments according to Gmail API.  </li> <li>Sends request, receives HTTP response, converts it back into MCP response format.  </li> </ul> 4. MCP Response Handling <ul> <li>MCP Client receives server response.  </li> <li>Converts it into a structured result understandable by the LLM.  </li> <li>LLM generates a human-readable confirmation for the user.</li> </ul>"},{"location":"example/#step-0-tool-discovery-handshake","title":"Step 0: Tool Discovery (Handshake)","text":"<p>Before any request is made, the MCP Client asks the MCP Server what tools and methods are available.</p> Capability Discovery Request <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"cap_001\",\n  \"method\": \"get_capabilities\"\n}\n</code></pre> Capability Discovery Response <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"cap_001\",\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"gmail\",\n        \"methods\": [\"send_email\", \"list_threads\", \"read_message\"]\n      }\n    ]\n  }\n}\n</code></pre> <p>\ud83d\udfe8 This handshake allows the host (LLM) to know which tools exist and what parameters each supports.</p>"},{"location":"example/#step-1-intent-parsing-mcp-host-llm","title":"Step 1: Intent Parsing (MCP Host / LLM)","text":"<p>The LLM (Host) interprets the user\u2019s natural language and converts it into a structured intent.</p> <p>\u201cSend an email to Alice with the report attached.\u201d</p> LLM output (conceptually) <pre><code>{\n  \"tool\": \"gmail\",\n  \"method\": \"send_email\",\n  \"params\": {\n    \"to\": \"alice@example.com\",\n    \"subject\": \"Monthly Report\",\n    \"body\": \"Hi Alice, see attached.\",\n    \"attachments\": [\"report.pdf\"]\n  }\n}\n</code></pre> <p>This prepares the request for translation into the MCP JSON-RPC standard.</p>"},{"location":"example/#step-2-mcp-client-translation","title":"Step 2 \u2014 MCP Client Translation","text":"<p>The MCP Client now converts the LLM\u2019s structured intent into a standardized MCP JSON-RPC request that any MCP-compliant server can understand.</p> MCP Request (JSON-RPC) <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"req_001\",\n  \"method\": \"send_email\",\n  \"tool\": \"gmail\",\n  \"params\": {\n    \"to\": \"alice@example.com\",\n    \"subject\": \"Monthly Report\",\n    \"body\": \"Hi Alice, see attached.\",\n    \"attachments\": [\n      {\n        \"filename\": \"report.pdf\",\n        \"content_base64\": \"JVBERi0xLjQKJc...\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Key points: - <code>jsonrpc: \"2.0\"</code> \u2192 standard JSON-RPC 2.0 format. - <code>id</code> \u2192 unique request ID for matching responses. - Attachments are Base64 encoded. - MCP Client ensures all fields conform to the tool schema.</p> <p>This JSON is now portable \u2014 any MCP-compliant server can interpret it.</p>"},{"location":"example/#step-3-mcp-server-execution","title":"Step 3 \u2014 MCP Server Execution","text":"<p>The MCP Server receives the standardized request, maps it to the appropriate tool API (in this case, Gmail), and performs the action.</p> Gmail API Call (POST) <pre><code>POST /gmail/v1/users/me/messages/send\nAuthorization: Bearer &lt;OAuthToken&gt;\nContent-Type: application/json\n\n{\n  \"raw\": \"&lt;Base64 encoded MIME email including attachment&gt;\"\n}\n</code></pre> <p>Server responsibilities: - Map the MCP method (<code>send_email</code>) to a real API endpoint (<code>POST /messages/send</code>). - Handle authentication (OAuth tokens). - Convert MCP JSON \u2192 Gmail API format. - Manage Gmail-specific errors and status codes.</p> <p>The MCP Server acts as the translator and executor between standardized MCP calls and the specific Gmail API.</p>"},{"location":"example/#step-4-response-handling","title":"Step 4 \u2014 Response Handling","text":"<p>Once Gmail responds, the MCP Server packages the result back into an MCP-compliant JSON-RPC response and returns it to the Client, then the Host, and finally to the User.</p> Success Response <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"req_001\",\n  \"result\": {\n    \"status\": \"success\",\n    \"message\": \"Email sent successfully.\",\n    \"emailId\": \"1789abcdef\"\n  }\n}\n</code></pre> Error Response <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"req_001\",\n  \"error\": {\n    \"code\": 400,\n    \"message\": \"Attachment exceeds size limit\"\n  }\n}\n</code></pre> <p>Key points: - Both success and error cases follow the same JSON-RPC format. - The Client converts this structured result into a format the LLM can use. - The LLM then translates that into a natural-language confirmation for the user.</p> <p>Finally, the Host says: \u201cEmail sent successfully.\u201d</p>"},{"location":"example/#summary-table-technical-overview","title":"Summary Table (Technical Overview)","text":"<p>Here\u2019s a recap of what each component does during the full MCP \u2192 Gmail request journey.</p> Step Component Role Technical Detail 0 Handshake / Tool Discovery Establish available tools Host queries Client \u2192 Server for <code>get_capabilities</code> (tool list &amp; schemas) 1 MCP Host (LLM) Understands user intent Parses natural language \u2192 identifies action (<code>send_email</code>) + parameters 2 MCP Client Translates intent \u2192 JSON-RPC Creates standardized request (<code>tool</code>, <code>method</code>, <code>params</code>), validates schema 3 MCP Server Executes tool-specific call Maps MCP method to Gmail API, handles OAuth &amp; errors 4 Gmail API Executes the real action Sends actual email via <code>POST /gmail/v1/users/me/messages/send</code> 5 Communication Standard Defines data exchange rules JSON-RPC 2.0 between Host \u2194 Client \u2194 Server <p>Together, these components turn a simple user sentence (\u201cSend an email to Alice\u201d) into a precise, authenticated API call \u2014 all through a shared standard: the Model Context Protocol (MCP).</p>"},{"location":"mcp-presentation/","title":"Mcp presentation","text":""},{"location":"mcp-presentation/#how-does-ai-talk-to-its-tools","title":"How Does AI Talk to Its Tools?","text":"<p>Explaining the Model Context Protocol (MCP) simply</p> <p></p>"},{"location":"mcp-presentation/#the-core-idea","title":"\ud83c\udfaf The Core Idea","text":"<p>If you forget everything else, remember this:</p> <p>Think of MCP as a universal docking station for LLMs to connect with its tools. It lets LLMs discover which tool (Gmail, Slack, Figma, etc) to use and  connect to it through a single, standardized protocol.</p>"},{"location":"mcp-presentation/#understanding-mcp","title":"Understanding MCP","text":"<p>MCP (Model Context Protocol) is an open-source standard for connecting AI applications to external systems. Using MCP, AI applications like Claude or ChatGPT can connect to data sources (e.g. local files, databases), tools (e.g. search engines, calculators) and workflows (e.g. specialized prompts)\u2014enabling them to access key information and perform tasks.</p>"},{"location":"mcp-presentation/#1-the-problem","title":"1\ufe0f\u20e3 The Problem","text":"<p>Modern AI tools often act in isolation \u2014 each with their own APIs and context limits.  </p>  sequenceDiagram     participant Model     participant ToolA     participant ToolB     Model-&gt;&gt;ToolA: Custom API call for Tool A (different format)     Model-&gt;&gt;ToolB: Custom API call for Tool B (different format)"},{"location":"mcp-presentation/#2-how-mcp-solves-the-problem","title":"2\ufe0f\u20e3 How MCP Solves the Problem","text":"<p>At its heart, MCP defines a shared protocol for how large language models communicate with its tools</p>  sequenceDiagram     participant Model     participant MCP     participant Tool1     participant Tool2     Model-&gt;&gt;MCP: Standardized request     MCP-&gt;&gt;Tool1: Invoke Tool1     MCP-&gt;&gt;Tool2: Invoke Tool2     Tool1--&gt;&gt;MCP: Response     Tool2--&gt;&gt;MCP: Response     MCP--&gt;&gt;Model: Standardized response"},{"location":"mcp-presentation/#3-mcp-architecture-client-server","title":"3\ufe0f\u20e3 MCP Architecture: Client &amp; Server","text":"<p>MCP has three main components: Host (LLM), Client, and Server (Tool).  </p> MCP Architecture (Image: Kashish Hora)  flowchart LR     A[AI Model / Host] --&gt;|Sends Intent| B[MCP Client]     B --&gt;|Standardized MCP Request| C[MCP Server]     C --&gt;|Executes Action| D[External Tool]     D --&gt; C     C --&gt;|Standardized Response| B     B --&gt;|Delivers Result| A  <ul> <li>Host / Model: Knows what it wants to do (e.g., send an email).  </li> <li>Client: Converts intent into an MCP request the server can understand.  </li> <li>Server: Executes the request on the tool and sends back a standard response.  </li> </ul>"},{"location":"mcp-presentation/#4-concrete-example-setting-a-reminder","title":"4\ufe0f\u20e3 Concrete Example: Setting a Reminder","text":"<p>Imagine your AI wants to set a reminder for you via Google Calendar.</p>  sequenceDiagram     participant User     participant Host     participant Client     participant Server     participant GCalendar     User-&gt;&gt;Host: \"Set a reminder for 10 AM tomorrow\"     Host-&gt;&gt;Client: Ask what tools are available     Client-&gt;&gt;Server: get_capabilities     Server--&gt;&gt;Client: List of tools (e.g. create_event)     Client--&gt;&gt;Host: Tool metadata returned     Host-&gt;&gt;Client: Generate MCP request (invoke create_event)     Client-&gt;&gt;Server: create_event request (time: 10 AM, title: reminder)     Server-&gt;&gt;GCalendar: Execute create event     GCalendar--&gt;&gt;Server: Event created     Server-&gt;&gt;Client: Success response     Client-&gt;&gt;Host: Return structured result     Host-&gt;&gt;User: \"Reminder set for 10 AM tomorrow.\""},{"location":"mcp-presentation/#5-why-this-matters-product-use-cases","title":"5\ufe0f\u20e3 Why This Matters: Product Use Cases","text":"Use Case How MCP Applies MCP Components Involved \ud83d\udce9 Automating Email AI sends, schedules, or drafts emails through Gmail Host (LLM) \u2192 Client \u2192 Gmail MCP Server \ud83d\udcca Generating Reports AI pulls data from multiple sources (Excel, Google Sheets, databases) and formats reports Host \u2192 Client \u2192 Tool MCP Servers (Sheets, DBs) \ud83d\udcac Managing Chatbots AI coordinates multi-platform chatbots (Slack, WhatsApp, internal tools) seamlessly Host \u2192 Client \u2192 Chat Platforms MCP Servers"},{"location":"mcp-presentation/#5-whats-next","title":"5\ufe0f\u20e3 What's next?","text":"<p>We\u2019ll go into detail on email automation, which demonstrates the full MCP flow in a simple example.</p>"},{"location":"reference/text-generation/","title":"Text Generation API","text":"<p>Generate human-like text based on prompts.</p>"},{"location":"reference/text-generation/#endpoint","title":"Endpoint","text":"<p>POST <code>/v1/text/generate</code></p>"},{"location":"reference/text-generation/#authentication","title":"Authentication","text":"<p>All requests require a Bearer token in the <code>Authorization</code> header.</p> <pre><code>Authorization: Bearer YOUR_API_KEY\nContent-Type: application/json\n</code></pre>"},{"location":"reference/text-generation/#request-body","title":"Request Body","text":"<pre><code>{\n  \"prompt\": \"Write a motivational quote about innovation.\",\n  \"max_tokens\": 100,\n  \"temperature\": 0.7\n}\n</code></pre>"},{"location":"reference/text-generation/#response","title":"Response","text":"<pre><code>{\n  \"id\": \"txt-123\",\n  \"object\": \"text_completion\",\n  \"output\": \"Innovation is the art of turning ideas into reality...\"\n}\n</code></pre>"},{"location":"reference/text-generation/#errors","title":"Errors","text":"<ul> <li><code>401 Unauthorized</code> \u2192 Invalid API key</li> <li><code>429 Too Many Requests</code> \u2192 Rate limit exceeded</li> </ul>"}]}